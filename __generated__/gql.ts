/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query getContacts($locale: I18NLocaleCode) {\n    contacts(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          contacts {\n            title\n            description\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            role\n            hotline\n            email\n          }\n        }\n      }\n    }\n  }\n": types.GetContactsDocument,
    "\n  mutation createCustomerContact($data: CustomerContactInput!, $locale: I18NLocaleCode) {\n    createCustomerContact(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          fullname\n          phone_number\n          email\n          content\n          address\n        }\n      }\n    }\n  } \n": types.CreateCustomerContactDocument,
    "\n  query getCustoms($locale: I18NLocaleCode) {\n    customs(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          procedures {\n            text\n            is_active\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCustomsDocument,
    "\n  query getEndpointDeliverys($locale: I18NLocaleCode) {\n    endpointDeliveries(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetEndpointDeliverysDocument,
    "\n  query GetHome($locale: I18NLocaleCode) {\n    homes(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banners {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          abouts {\n            is_plus\n            heading\n            subject\n            detail\n          }\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          home_tabs {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          services {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            url\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            subs {\n              title\n              url\n            }\n          }\n          lookups {\n            title\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n          contacts {\n            name\n            phone\n            phone_displayed\n          }\n          partners {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetHomeDocument,
    "\n  query GetFooter($locale: I18NLocaleCode) {\n    footers(locale: $locale) {\n      data {\n        attributes {\n          links {\n            title\n            links {\n              icon {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n              url\n              is_external_link\n            }\n          }\n          infos {\n            title\n            url\n          }\n          socials {\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            url\n          }\n          url_bo_cong_thuong\n        }\n      }\n    }\n  }\n": types.GetFooterDocument,
    "\n  query getIntroduces($locale: I18NLocaleCode) {\n    introduces(locale: $locale) {\n      data{\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner{\n            data{\n              attributes{\n                url\n              }\n            }\n          }\n          general {\n            image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            sub_image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            title\n            content\n          }\n          mission {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            properties {\n              title\n            }\n            introduce {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          core_values {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            center_customer_title\n            center_customer_content\n            kindness_title\n            kindness_content {\n              title\n            }\n          }\n          reasons_choose_we {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            reasons {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n              description\n            }\n          }\n          other {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            link\n            title\n            content\n          }\n        }\n      }\n    }\n  } \n": types.GetIntroducesDocument,
    "\n  query getCountry($locale: I18NLocaleCode) {\n    countries(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n": types.GetCountryDocument,
    "\n  query getProvince($locale: I18NLocaleCode) {\n    provinces(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n": types.GetProvinceDocument,
    "\n  query getMilestones($locale: I18NLocaleCode) {\n    milestones(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          bg_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          milestones {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            timeline\n            datetime\n            content\n          }\n        }\n      }\n    }\n  }\n": types.GetMilestonesDocument,
    "\n  query getBannerNew($locale: I18NLocaleCode) {\n    listNews(locale: $locale) {\n      data {\n        attributes {\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          type\n        }\n      }\n    }\n  }\n": types.GetBannerNewDocument,
    "\n  query getNews($locale: I18NLocaleCode, $filter: NewsFiltersInput, $pagination: PaginationArg) {\n    newss (locale: $locale, filters: $filter, pagination: $pagination) {\n      data {\n        id\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          title\n          content\n          preview_content\n          updatedAt\n          type\n          is_hot\n          slug\n          page_view\n          like\n          dislike\n          featured_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          news {\n            data {\n              attributes {\n                title\n                content\n                preview_content\n                page_view\n                type\n                is_hot\n                like\n                dislike\n                updatedAt\n                slug\n                featured_image {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n": types.GetNewsDocument,
    "\n  mutation updatePageNew($id: ID!, $data: NewsInput!, $locale: I18NLocaleCode) {\n    updateNews(id: $id, data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          page_view\n          like\n          dislike\n        }\n      }\n    }\n  }\n  \n": types.UpdatePageNewDocument,
    "\n  query getPackings($locale: I18NLocaleCode) {\n    packings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetPackingsDocument,
    "\n  query GetService($locale: I18NLocaleCode) {\n    services(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          bg_service {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          description_service\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            number\n            object\n          }\n          transportations {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n": types.GetServiceDocument,
    "\n  mutation createOrderService($data: OrderInput!, $locale: I18NLocaleCode) {\n    createOrder(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          fullname\n          phone_number\n          email\n          service\n          from\n          to\n          note\n        }\n      }\n    }\n  } \n": types.CreateOrderServiceDocument,
    "\n  query getTruckings($locale: I18NLocaleCode) {\n    truckings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          sub_intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          internal_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          international_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          intro_features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            description\n          }\n          internal_features {\n            title\n            description\n          }\n          international_features {\n            title\n            description\n          }\n          other {\n            title\n            link\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetTruckingsDocument,
    "\n  query getWarehouses($locale: I18NLocaleCode) {\n    warehouses(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetWarehousesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getContacts($locale: I18NLocaleCode) {\n    contacts(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          contacts {\n            title\n            description\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            role\n            hotline\n            email\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getContacts($locale: I18NLocaleCode) {\n    contacts(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          contacts {\n            title\n            description\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            role\n            hotline\n            email\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createCustomerContact($data: CustomerContactInput!, $locale: I18NLocaleCode) {\n    createCustomerContact(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          fullname\n          phone_number\n          email\n          content\n          address\n        }\n      }\n    }\n  } \n"): (typeof documents)["\n  mutation createCustomerContact($data: CustomerContactInput!, $locale: I18NLocaleCode) {\n    createCustomerContact(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          title\n          fullname\n          phone_number\n          email\n          content\n          address\n        }\n      }\n    }\n  } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCustoms($locale: I18NLocaleCode) {\n    customs(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          procedures {\n            text\n            is_active\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCustoms($locale: I18NLocaleCode) {\n    customs(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          procedures {\n            text\n            is_active\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getEndpointDeliverys($locale: I18NLocaleCode) {\n    endpointDeliveries(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getEndpointDeliverys($locale: I18NLocaleCode) {\n    endpointDeliveries(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHome($locale: I18NLocaleCode) {\n    homes(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banners {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          abouts {\n            is_plus\n            heading\n            subject\n            detail\n          }\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          home_tabs {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          services {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            url\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            subs {\n              title\n              url\n            }\n          }\n          lookups {\n            title\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n          contacts {\n            name\n            phone\n            phone_displayed\n          }\n          partners {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHome($locale: I18NLocaleCode) {\n    homes(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banners {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          abouts {\n            is_plus\n            heading\n            subject\n            detail\n          }\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          home_tabs {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n          }\n          services {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            url\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            subs {\n              title\n              url\n            }\n          }\n          lookups {\n            title\n            background {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n          contacts {\n            name\n            phone\n            phone_displayed\n          }\n          partners {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFooter($locale: I18NLocaleCode) {\n    footers(locale: $locale) {\n      data {\n        attributes {\n          links {\n            title\n            links {\n              icon {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n              url\n              is_external_link\n            }\n          }\n          infos {\n            title\n            url\n          }\n          socials {\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            url\n          }\n          url_bo_cong_thuong\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFooter($locale: I18NLocaleCode) {\n    footers(locale: $locale) {\n      data {\n        attributes {\n          links {\n            title\n            links {\n              icon {\n                data {\n                  attributes {\n                    url\n                  }\n                }\n              }\n              title\n              url\n              is_external_link\n            }\n          }\n          infos {\n            title\n            url\n          }\n          socials {\n            icon {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            url\n          }\n          url_bo_cong_thuong\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getIntroduces($locale: I18NLocaleCode) {\n    introduces(locale: $locale) {\n      data{\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner{\n            data{\n              attributes{\n                url\n              }\n            }\n          }\n          general {\n            image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            sub_image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            title\n            content\n          }\n          mission {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            properties {\n              title\n            }\n            introduce {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          core_values {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            center_customer_title\n            center_customer_content\n            kindness_title\n            kindness_content {\n              title\n            }\n          }\n          reasons_choose_we {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            reasons {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n              description\n            }\n          }\n          other {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            link\n            title\n            content\n          }\n        }\n      }\n    }\n  } \n"): (typeof documents)["\n  query getIntroduces($locale: I18NLocaleCode) {\n    introduces(locale: $locale) {\n      data{\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner{\n            data{\n              attributes{\n                url\n              }\n            }\n          }\n          general {\n            image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            sub_image{\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            title\n            content\n          }\n          mission {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            properties {\n              title\n            }\n            introduce {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n            }\n          }\n          core_values {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            center_customer_title\n            center_customer_content\n            kindness_title\n            kindness_content {\n              title\n            }\n          }\n          reasons_choose_we {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            description\n            reasons {\n              icon {\n                data{\n                  attributes{\n                    url\n                  }\n                }\n              }\n              title\n              description\n            }\n          }\n          other {\n            image {\n              data{\n                attributes{\n                  url\n                }\n              }\n            }\n            link\n            title\n            content\n          }\n        }\n      }\n    }\n  } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getCountry($locale: I18NLocaleCode) {\n    countries(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getCountry($locale: I18NLocaleCode) {\n    countries(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getProvince($locale: I18NLocaleCode) {\n    provinces(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getProvince($locale: I18NLocaleCode) {\n    provinces(locale: $locale) {\n      data {\n        attributes {\n          name\n          fullname\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getMilestones($locale: I18NLocaleCode) {\n    milestones(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          bg_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          milestones {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            timeline\n            datetime\n            content\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getMilestones($locale: I18NLocaleCode) {\n    milestones(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          bg_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          milestones {\n            image {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n            timeline\n            datetime\n            content\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getBannerNew($locale: I18NLocaleCode) {\n    listNews(locale: $locale) {\n      data {\n        attributes {\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          type\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getBannerNew($locale: I18NLocaleCode) {\n    listNews(locale: $locale) {\n      data {\n        attributes {\n          banner {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          type\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getNews($locale: I18NLocaleCode, $filter: NewsFiltersInput, $pagination: PaginationArg) {\n    newss (locale: $locale, filters: $filter, pagination: $pagination) {\n      data {\n        id\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          title\n          content\n          preview_content\n          updatedAt\n          type\n          is_hot\n          slug\n          page_view\n          like\n          dislike\n          featured_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          news {\n            data {\n              attributes {\n                title\n                content\n                preview_content\n                page_view\n                type\n                is_hot\n                like\n                dislike\n                updatedAt\n                slug\n                featured_image {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getNews($locale: I18NLocaleCode, $filter: NewsFiltersInput, $pagination: PaginationArg) {\n    newss (locale: $locale, filters: $filter, pagination: $pagination) {\n      data {\n        id\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          title\n          content\n          preview_content\n          updatedAt\n          type\n          is_hot\n          slug\n          page_view\n          like\n          dislike\n          featured_image {\n            data {\n              attributes {\n                url\n              }\n            }\n          }\n          news {\n            data {\n              attributes {\n                title\n                content\n                preview_content\n                page_view\n                type\n                is_hot\n                like\n                dislike\n                updatedAt\n                slug\n                featured_image {\n                  data {\n                    attributes {\n                      url\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      meta {\n        pagination {\n          total\n          page\n          pageSize\n          pageCount\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation updatePageNew($id: ID!, $data: NewsInput!, $locale: I18NLocaleCode) {\n    updateNews(id: $id, data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          page_view\n          like\n          dislike\n        }\n      }\n    }\n  }\n  \n"): (typeof documents)["\n  mutation updatePageNew($id: ID!, $data: NewsInput!, $locale: I18NLocaleCode) {\n    updateNews(id: $id, data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          page_view\n          like\n          dislike\n        }\n      }\n    }\n  }\n  \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getPackings($locale: I18NLocaleCode) {\n    packings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getPackings($locale: I18NLocaleCode) {\n    packings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetService($locale: I18NLocaleCode) {\n    services(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          bg_service {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          description_service\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            number\n            object\n          }\n          transportations {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetService($locale: I18NLocaleCode) {\n    services(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          bg_service {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          description_service\n          features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            number\n            object\n          }\n          transportations {\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            link\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  mutation createOrderService($data: OrderInput!, $locale: I18NLocaleCode) {\n    createOrder(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          fullname\n          phone_number\n          email\n          service\n          from\n          to\n          note\n        }\n      }\n    }\n  } \n"): (typeof documents)["\n  mutation createOrderService($data: OrderInput!, $locale: I18NLocaleCode) {\n    createOrder(data: $data, locale: $locale) {\n      data {\n        id\n        attributes {\n          fullname\n          phone_number\n          email\n          service\n          from\n          to\n          note\n        }\n      }\n    }\n  } \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getTruckings($locale: I18NLocaleCode) {\n    truckings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          sub_intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          internal_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          international_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          intro_features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            description\n          }\n          internal_features {\n            title\n            description\n          }\n          international_features {\n            title\n            description\n          }\n          other {\n            title\n            link\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getTruckings($locale: I18NLocaleCode) {\n    truckings(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          description\n          intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          sub_intro_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          internal_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          international_img {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          intro_features {\n            icon {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            title\n            description\n          }\n          internal_features {\n            title\n            description\n          }\n          international_features {\n            title\n            description\n          }\n          other {\n            title\n            link\n            image {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getWarehouses($locale: I18NLocaleCode) {\n    warehouses(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query getWarehouses($locale: I18NLocaleCode) {\n    warehouses(locale: $locale) {\n      data {\n        attributes {\n          SEO {\n            metaTitle\n            metaDescription\n            metaImage {\n              data {\n                attributes {\n                  url\n                }\n              }\n            }\n          }\n          banner {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n          infomation {\n            info_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            info_sub_img {\n              data {\n                attributes {\n                  url\n                  previewUrl\n                }\n              }\n            }\n            description\n            advantage {\n              title\n            }\n          }\n          bg_price {\n            data {\n              attributes {\n                url\n                previewUrl\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;